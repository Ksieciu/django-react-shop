[{"D:\\GitHub\\django-react-shop\\frontend\\src\\index.js":"1","D:\\GitHub\\django-react-shop\\frontend\\src\\App.js":"2","D:\\GitHub\\django-react-shop\\frontend\\src\\reportWebVitals.js":"3","D:\\GitHub\\django-react-shop\\frontend\\src\\components\\Header.js":"4","D:\\GitHub\\django-react-shop\\frontend\\src\\components\\Footer.js":"5","D:\\GitHub\\django-react-shop\\frontend\\src\\screens\\HomeScreen.js":"6","D:\\GitHub\\django-react-shop\\frontend\\src\\components\\Product.js":"7","D:\\GitHub\\django-react-shop\\frontend\\src\\components\\Rating.js":"8","D:\\GitHub\\django-react-shop\\frontend\\src\\screens\\ProductScreen.js":"9","D:\\GitHub\\django-react-shop\\frontend\\src\\store.js":"10","D:\\GitHub\\django-react-shop\\frontend\\src\\reducers\\productReducers.js":"11","D:\\GitHub\\django-react-shop\\frontend\\src\\constants\\productConstants.js":"12","D:\\GitHub\\django-react-shop\\frontend\\src\\actions\\productActions.js":"13","D:\\GitHub\\django-react-shop\\frontend\\src\\components\\Loader.js":"14","D:\\GitHub\\django-react-shop\\frontend\\src\\components\\Message.js":"15","D:\\GitHub\\django-react-shop\\frontend\\src\\screens\\CartScreen.js":"16","D:\\GitHub\\django-react-shop\\frontend\\src\\reducers\\cartReducers.js":"17","D:\\GitHub\\django-react-shop\\frontend\\src\\constants\\cartConstants.js":"18","D:\\GitHub\\django-react-shop\\frontend\\src\\actions\\cartActions.js":"19","D:\\GitHub\\django-react-shop\\frontend\\src\\reducers\\userReducers.js":"20","D:\\GitHub\\django-react-shop\\frontend\\src\\constants\\userConstants.js":"21","D:\\GitHub\\django-react-shop\\frontend\\src\\screens\\LoginScreen.js":"22","D:\\GitHub\\django-react-shop\\frontend\\src\\actions\\userActions.js":"23","D:\\GitHub\\django-react-shop\\frontend\\src\\components\\FormContainer.js":"24","D:\\GitHub\\django-react-shop\\frontend\\src\\screens\\RegisterScreen.js":"25","D:\\GitHub\\django-react-shop\\frontend\\src\\screens\\ProfileScreen.js":"26","D:\\GitHub\\django-react-shop\\frontend\\src\\screens\\ShippingScreen.js":"27","D:\\GitHub\\django-react-shop\\frontend\\src\\components\\CheckoutSteps.js":"28","D:\\GitHub\\django-react-shop\\frontend\\src\\screens\\PaymentScreen.js":"29","D:\\GitHub\\django-react-shop\\frontend\\src\\screens\\PlaceOrderScreen.js":"30","D:\\GitHub\\django-react-shop\\frontend\\src\\reducers\\orderReducers.js":"31","D:\\GitHub\\django-react-shop\\frontend\\src\\constants\\orderConstants.js":"32","D:\\GitHub\\django-react-shop\\frontend\\src\\actions\\orderActions.js":"33","D:\\GitHub\\django-react-shop\\frontend\\src\\screens\\OrderScreen.js":"34"},{"size":595,"mtime":1612525739025,"results":"35","hashOfConfig":"36"},{"size":1533,"mtime":1613130360490,"results":"37","hashOfConfig":"36"},{"size":362,"mtime":499162500000,"results":"38","hashOfConfig":"36"},{"size":1901,"mtime":1612790003720,"results":"39","hashOfConfig":"36"},{"size":378,"mtime":1612359774759,"results":"40","hashOfConfig":"36"},{"size":1186,"mtime":1612529250272,"results":"41","hashOfConfig":"36"},{"size":1051,"mtime":1612788790520,"results":"42","hashOfConfig":"36"},{"size":1874,"mtime":1612362334932,"results":"43","hashOfConfig":"36"},{"size":5666,"mtime":1612544555825,"results":"44","hashOfConfig":"36"},{"size":1718,"mtime":1613141550481,"results":"45","hashOfConfig":"36"},{"size":1167,"mtime":1612536619739,"results":"46","hashOfConfig":"36"},{"size":372,"mtime":1612536506510,"results":"47","hashOfConfig":"36"},{"size":1328,"mtime":1612788823961,"results":"48","hashOfConfig":"36"},{"size":478,"mtime":1612529072311,"results":"49","hashOfConfig":"36"},{"size":242,"mtime":1612529193921,"results":"50","hashOfConfig":"36"},{"size":4701,"mtime":1612788905662,"results":"51","hashOfConfig":"36"},{"size":1521,"mtime":1612968973003,"results":"52","hashOfConfig":"36"},{"size":290,"mtime":1612968799127,"results":"53","hashOfConfig":"36"},{"size":1376,"mtime":1612883013962,"results":"54","hashOfConfig":"36"},{"size":2559,"mtime":1612871611250,"results":"55","hashOfConfig":"36"},{"size":907,"mtime":1612871568016,"results":"56","hashOfConfig":"36"},{"size":2636,"mtime":1612788692126,"results":"57","hashOfConfig":"36"},{"size":4503,"mtime":1612871661132,"results":"58","hashOfConfig":"36"},{"size":396,"mtime":1612786732298,"results":"59","hashOfConfig":"36"},{"size":4086,"mtime":1612867673428,"results":"60","hashOfConfig":"36"},{"size":4816,"mtime":1612871456130,"results":"61","hashOfConfig":"36"},{"size":3263,"mtime":1612882380348,"results":"62","hashOfConfig":"36"},{"size":1613,"mtime":1612881527645,"results":"63","hashOfConfig":"36"},{"size":1781,"mtime":1612883080551,"results":"64","hashOfConfig":"36"},{"size":6712,"mtime":1612968704916,"results":"65","hashOfConfig":"36"},{"size":2178,"mtime":1613141530960,"results":"66","hashOfConfig":"36"},{"size":622,"mtime":1613141419763,"results":"67","hashOfConfig":"36"},{"size":3262,"mtime":1613141655460,"results":"68","hashOfConfig":"36"},{"size":5995,"mtime":1613141692683,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"uk81lz",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"72"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"72"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"72"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"72"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"72"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"72"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"72"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"72"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\GitHub\\django-react-shop\\frontend\\src\\index.js",[],["148","149"],"D:\\GitHub\\django-react-shop\\frontend\\src\\App.js",[],"D:\\GitHub\\django-react-shop\\frontend\\src\\reportWebVitals.js",[],"D:\\GitHub\\django-react-shop\\frontend\\src\\components\\Header.js",["150"],"import React from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Navbar, Nav, Container, Row, NavDropdown } from \"react-bootstrap\";\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { logout } from '../actions/userActions'\r\n\r\n\r\nfunction Header() {\r\n\r\n  const userLogin = useSelector(state => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const logoutHandler = () => {\r\n    dispatch(logout())\r\n  }\r\n\r\n\r\n  return (\r\n    <header>\r\n      <Navbar bg=\"light\" expand=\"lg\" collapseOnSelect>\r\n        <Container>\r\n            <LinkContainer to='/'>\r\n                <Navbar.Brand>Deimos Shop</Navbar.Brand>\r\n            </LinkContainer>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <LinkContainer to='/cart'>\r\n                        <Nav.Link><i className=\"fas fa-shopping-cart\"></i>Cart</Nav.Link>\r\n                    </LinkContainer>\r\n\r\n                    {userInfo ? (\r\n                      <NavDropdown title={userInfo.name} id='username'>\r\n                        <LinkContainer to='/profile'>\r\n                          <NavDropdown.Item>Profile</NavDropdown.Item>\r\n                        </LinkContainer>\r\n                        <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>\r\n\r\n                      </NavDropdown>\r\n                    ): (\r\n                      <LinkContainer to='/login'>\r\n                        <Nav.Link><i className=\"fas fa-user\"></i>Login</Nav.Link>\r\n                      </LinkContainer>\r\n                    )}\r\n                    \r\n                    \r\n                    \r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","D:\\GitHub\\django-react-shop\\frontend\\src\\components\\Footer.js",[],"D:\\GitHub\\django-react-shop\\frontend\\src\\screens\\HomeScreen.js",["151"],"import React, {useState, useEffect } from 'react'\r\nimport { Row, Col } from 'react-bootstrap'\r\nimport Product from '../components/Product'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { listProducts } from '../actions/productActions'\r\n\r\n\r\nfunction HomeScreen() {\r\n    const dispatch = useDispatch()\r\n    const productList = useSelector(state => state.productList)\r\n    const {error, loading, products} = productList\r\n\r\n    useEffect(()=>{\r\n        dispatch(listProducts())\r\n\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div>\r\n            <h1>Latest Products</h1>\r\n            { loading ? <Loader />\r\n                : error ? <Message variant='danger'>{error}</Message>\r\n                    : \r\n                    <Row>\r\n                    { products.map(product => (\r\n                        <Col key={product.id}  sm={12} md={6} lg={4} xl={3}>\r\n                            <Product product={product} />\r\n                        </Col>\r\n                    )) }\r\n                    </Row>\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n","D:\\GitHub\\django-react-shop\\frontend\\src\\components\\Product.js",[],"D:\\GitHub\\django-react-shop\\frontend\\src\\components\\Rating.js",[],"D:\\GitHub\\django-react-shop\\frontend\\src\\screens\\ProductScreen.js",["152"],"import React, {useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { Row, Col, Image, ListGroup, Button, Card, Form } from 'react-bootstrap'\r\nimport Rating from '../components/Rating'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { listProductDetails } from '../actions/productActions'\r\n\r\n\r\nfunction ProductScreen({ match, history }) {\r\n    const [quantity, setQuantity] = useState(1)\r\n\r\n    const dispatch = useDispatch()\r\n    const productDetails = useSelector(state => state.productDetails)\r\n    const { loading, error, product } = productDetails\r\n\r\n    useEffect(()=>{\r\n        dispatch(listProductDetails(match.params.id))\r\n\r\n    }, [dispatch, match])\r\n\r\n    const addToCartHandler = () =>{\r\n        history.push(`/cart/${match.params.id}?quantity=${quantity}`)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Link to='/' className='btn btn-light my-3'>Go Back</Link>\r\n            {\r\n                loading ? <Loader />\r\n                : error\r\n                    ? <Message variant='danger'>{error}</Message>\r\n                :(\r\n                    <Row>\r\n                        <Col md={6}>\r\n                            <Image src={product.image} alt={product.name} fluid />\r\n                        </Col>\r\n                        <Col md={3}>\r\n                            <ListGroup variant=\"flush\">\r\n                                <ListGroup.Item>\r\n                                    <h3>{product.name}</h3>\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <Rating value={product.rating} text={`${product.numReviews} reviews`} color={'#f8e825'} />\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    Price: {product.price}\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    Description: {product.description}\r\n                                </ListGroup.Item>\r\n                            </ListGroup>\r\n                        </Col>\r\n                        <Col md={3}>\r\n                            <Card>\r\n                                <ListGroup variant='flush'>\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Price:</Col>\r\n                                            <Col>\r\n                                                <strong>${product.price}</strong>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Status:</Col>\r\n                                            <Col>\r\n                                            {product.count_in_stock > 0 ? 'In Stock' : 'Out of Stock'}\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n                                    {product.count_in_stock > 0 && (\r\n                                        <ListGroup.Item>\r\n                                            <Row>\r\n                                                <Col>Quantity</Col>\r\n                                                <Col xs='auto' className='my-1'>\r\n                                                    <Form.Control\r\n                                                        as=\"select\"\r\n                                                        value={quantity}\r\n                                                        onChange={(e)=> setQuantity(e.target.value)}\r\n                                                    >\r\n                                                        {\r\n                                                            [...Array(product.count_in_stock).keys()].map((x) => (\r\n                                                                <option key={x + 1} value={x + 1}>\r\n                                                                    {x + 1}\r\n                                                                </option>\r\n                                                            ))\r\n                                                        }\r\n\r\n                                                    </Form.Control>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </ListGroup.Item>\r\n                                    )}\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Button \r\n                                            onClick={addToCartHandler}\r\n                                            className='btn-block' \r\n                                            disabled={product.count_in_stock == 0} \r\n                                            type='button'>\r\n                                            Add to Cart\r\n                                        </Button>\r\n                                    </ListGroup.Item>\r\n                                </ListGroup>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                )\r\n            }       \r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductScreen\r\n","D:\\GitHub\\django-react-shop\\frontend\\src\\store.js",[],"D:\\GitHub\\django-react-shop\\frontend\\src\\reducers\\productReducers.js",[],"D:\\GitHub\\django-react-shop\\frontend\\src\\constants\\productConstants.js",[],"D:\\GitHub\\django-react-shop\\frontend\\src\\actions\\productActions.js",[],"D:\\GitHub\\django-react-shop\\frontend\\src\\components\\Loader.js",[],"D:\\GitHub\\django-react-shop\\frontend\\src\\components\\Message.js",[],"D:\\GitHub\\django-react-shop\\frontend\\src\\screens\\CartScreen.js",[],"D:\\GitHub\\django-react-shop\\frontend\\src\\reducers\\cartReducers.js",[],"D:\\GitHub\\django-react-shop\\frontend\\src\\constants\\cartConstants.js",[],"D:\\GitHub\\django-react-shop\\frontend\\src\\actions\\cartActions.js",[],"D:\\GitHub\\django-react-shop\\frontend\\src\\reducers\\userReducers.js",[],"D:\\GitHub\\django-react-shop\\frontend\\src\\constants\\userConstants.js",[],"D:\\GitHub\\django-react-shop\\frontend\\src\\screens\\LoginScreen.js",[],"D:\\GitHub\\django-react-shop\\frontend\\src\\actions\\userActions.js",["153"],"import axios from 'axios'\r\nimport { \r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n\r\n    USER_LOGOUT, \r\n    \r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_FAIL,\r\n\r\n    USER_DETAILS_REQUEST,\r\n    USER_DETAILS_SUCCESS,\r\n    USER_DETAILS_FAIL,\r\n    USER_DETAILS_RESET,\r\n\r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL,\r\n    USER_UPDATE_PROFILE_RESET,\r\n} from '../constants/userConstants'\r\n\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n    try{\r\n        dispatch({\r\n            type: USER_LOGIN_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            '/api/users/login/',\r\n            {'username': email, 'password':password},\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch(error) {\r\n        dispatch({\r\n            type: USER_LOGIN_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n    localStorage.removeItem('userInfo')\r\n    dispatch({type:USER_LOGOUT})\r\n    dispatch({type:USER_DETAILS_RESET})\r\n}\r\n\r\n\r\nexport const register = (name, email, password) => async (dispatch) => {\r\n    try{\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            '/api/users/register/',\r\n            {'name': name, 'email': email, 'password':password},\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch(error) {\r\n        dispatch({\r\n            type: USER_REGISTER_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n    try{\r\n        dispatch({\r\n            type: USER_DETAILS_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/users/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n    } catch(error) {\r\n        dispatch({\r\n            type: USER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n    try{\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/users/profile/update/`,\r\n            user,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch(error) {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}","D:\\GitHub\\django-react-shop\\frontend\\src\\components\\FormContainer.js",[],"D:\\GitHub\\django-react-shop\\frontend\\src\\screens\\RegisterScreen.js",["154"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\n\r\nimport { register } from '../actions/userActions'\r\n\r\n\r\nfunction RegisterScreen({ location, history }) {\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    const userRegister = useSelector(state => state.userRegister)\r\n    const { error, loading, userInfo } = userRegister\r\n\r\n    useEffect(() => {\r\n        if(userInfo){\r\n            history.push(redirect)\r\n        }\r\n    }, [history, userInfo, redirect])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(password != confirmPassword){\r\n            setMessage('Password do not match!')\r\n        } else {\r\n            dispatch(register(name, email, password))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <h1>Sign In</h1>\r\n            {message && <Message variant='danger'>{message}</Message>}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n            \r\n            <Form onSubmit={submitHandler}>\r\n                <Form.Group controlId='name'>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='name'\r\n                        placeholder='Enter name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='email'>\r\n                    <Form.Label>Email Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='email'\r\n                        placeholder='Enter Email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n            \r\n\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Enter Password'\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                \r\n                <Form.Group controlId='confirmPassword'>\r\n                    <Form.Label>Confirm Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Confirm Password'\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Register\r\n                </Button>\r\n\r\n            </Form>\r\n\r\n            <Row className='py-3'>\r\n                <Col>\r\n                    Already have an account? <Link\r\n                    to={redirect ? `/login?redirect=${redirect}` : '/login'}>\r\n                    Sign In!\r\n                    </Link>\r\n                </Col>\r\n            </Row>\r\n            \r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default RegisterScreen\r\n","D:\\GitHub\\django-react-shop\\frontend\\src\\screens\\ProfileScreen.js",["155","156"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\r\n\r\n\r\nfunction ProfileScreen({ history }) {\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const { error, loading, user } = userDetails\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\r\n    const { success } = userUpdateProfile\r\n\r\n\r\n    useEffect(() => {\r\n        // if not logged in then redirect to login\r\n        if(!userInfo){\r\n            history.push('/login')\r\n        } else {\r\n            // if data not loaded, then dispatch to get them else set state with data\r\n            if(!user || !user.name || success){\r\n                dispatch({ type: USER_UPDATE_PROFILE_RESET })\r\n                dispatch(getUserDetails('profile'))\r\n            } else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n            }\r\n        }\r\n    }, [dispatch, history, userInfo, user, success])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(password != confirmPassword){\r\n            setMessage('Password do not match!')\r\n        } else {\r\n            dispatch(updateUserProfile({\r\n                'id':user.id,\r\n                'name': name,\r\n                'email': email,\r\n                'password': password\r\n            }))\r\n            setMessage('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Col md={3}>\r\n                <h2>User Profile</h2>\r\n\r\n                {message && <Message variant='danger'>{message}</Message>}\r\n                {error && <Message variant='danger'>{error}</Message>}\r\n                {loading && <Loader />}\r\n                \r\n                <Form onSubmit={submitHandler}>\r\n                    <Form.Group controlId='name'>\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='name'\r\n                            placeholder='Enter name'\r\n                            value={name}\r\n                            onChange={(e) => setName(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='email'>\r\n                        <Form.Label>Email Address</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='email'\r\n                            placeholder='Enter Email'\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                \r\n\r\n                    <Form.Group controlId='password'>\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control\r\n                            type='password'\r\n                            placeholder='Enter Password'\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group controlId='confirmPassword'>\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control\r\n                            type='password'\r\n                            placeholder='Confirm Password'\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Button type='submit' variant='primary'>\r\n                        Update\r\n                    </Button>\r\n\r\n                </Form>\r\n            </Col>\r\n            <Col md={9}>\r\n                <h2>My Orders</h2>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen\r\n","D:\\GitHub\\django-react-shop\\frontend\\src\\screens\\ShippingScreen.js",["157"],"import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { saveShippingAddress } from '../actions/cartActions'\r\n\r\n\r\nfunction ShippingScreen({ history }) {\r\n\r\n    const cart = useSelector(state => state.cart)\r\n    const { shippingAddress } = cart\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [address, setAddress] = useState(shippingAddress.address)\r\n    const [city, setCity] = useState(shippingAddress.city)\r\n    const [postcode, setPostcode] = useState(shippingAddress.postcode)\r\n    const [country, setCountry] = useState(shippingAddress.country)\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(saveShippingAddress({ address, city, postcode, country }))\r\n        history.push('/payment')\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <CheckoutSteps step1 step2/>\r\n            <h1>Shipping</h1>\r\n            <Form onSubmit={submitHandler}>\r\n                <Form.Group controlId='address'>\r\n                    <Form.Label>Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter address'\r\n                        value={address ? address : ''}\r\n                        onChange={(e) => setAddress(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='city'>\r\n                    <Form.Label>City</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter city'\r\n                        value={city ? city : ''}\r\n                        onChange={(e) => setCity(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='postcode'>\r\n                    <Form.Label>Postcode</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter postcode'\r\n                        value={postcode ? postcode : ''}\r\n                        onChange={(e) => setPostcode(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='country'>\r\n                    <Form.Label>Country</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter country'\r\n                        value={country ? country : ''}\r\n                        onChange={(e) => setCountry(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Continue\r\n                </Button>\r\n\r\n            </Form>\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default ShippingScreen\r\n","D:\\GitHub\\django-react-shop\\frontend\\src\\components\\CheckoutSteps.js",[],"D:\\GitHub\\django-react-shop\\frontend\\src\\screens\\PaymentScreen.js",["158"],"import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport { Form, Button, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { savePaymentMethod } from '../actions/cartActions'\r\n\r\n\r\nfunction PaymentScreen({ history }) {\r\n\r\n    const cart = useSelector(state => state.cart)\r\n    const { shippingAddress } = cart\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [paymentMethod, setPaymentMethod] = useState('PayPal')\r\n\r\n    if(!shippingAddress.address){\r\n        history.push('/shipping')\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(savePaymentMethod(paymentMethod))\r\n        history.push('/placeorder')\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <CheckoutSteps step1 step2 step3 />\r\n\r\n            <Form onSubmit={submitHandler}>\r\n                <Form.Group>\r\n                    <Form.Label as='legend'>Select Method</Form.Label>\r\n                    <Col>\r\n                        <Form.Check\r\n                            type='radio'\r\n                            label='PayPal or Credit Card'\r\n                            id='paypal'\r\n                            name='paymentMethod'\r\n                            checked\r\n                            onChange={(e) => setPaymentMethod(e.target.value)}\r\n                        >\r\n\r\n                        </Form.Check>\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Continue\r\n                </Button>\r\n            </Form>\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default PaymentScreen\r\n","D:\\GitHub\\django-react-shop\\frontend\\src\\screens\\PlaceOrderScreen.js",["159","160"],"import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport Message from '../components/Message'\r\nimport { createOrder } from '../actions/orderActions'\r\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\r\n\r\n\r\nfunction PlaceOrderScreen({ history }) {\r\n\r\n    const orderCreate = useSelector(state => state.orderCreate)\r\n    const { order, error, success } = orderCreate\r\n\r\n    const dispatch = useDispatch()\r\n    const cart = useSelector(state => state.cart)\r\n\r\n    cart.itemsPrice = cart.cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0).toFixed(2)\r\n    cart.shippingPrice = (cart.itemsPrice > 200 ? 0 : 11).toFixed(2)\r\n    cart.taxPrice = Number(cart.itemsPrice * (0.23) / (1.23)).toFixed(2)\r\n    cart.totalPrice = Number(cart.itemsPrice) + Number(cart.shippingPrice)\r\n\r\n    if(!cart.paymentMethod){\r\n        history.push('/payment')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(success){\r\n            history.push(`/order/${order.id}`)\r\n            dispatch({ type: ORDER_CREATE_RESET })\r\n        }\r\n    }, [success, history])\r\n\r\n    const placeOrder = () => {\r\n        dispatch(createOrder({\r\n            orderItems: cart.cartItems,\r\n            shippingAddress: cart.shippingAddress,\r\n            paymentMethod: cart.paymentMethod,\r\n            itemsPrice: cart.itemsPrice,\r\n            shippingPrice: cart.shippingPrice,\r\n            taxPrice: cart.taxPrice,\r\n            totalPrice: cart.totalPrice,\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <CheckoutSteps step1 step2 step3 step4 />\r\n            <Row>\r\n                <Col md={8}>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <h2>Shipping</h2>\r\n\r\n                            <p>\r\n                                <strong>Shipping: </strong>\r\n                                {cart.shippingAddress.address}, {cart.shippingAddress.city}\r\n                                {'   '}\r\n                                {cart.shippingAddress.postcode},\r\n                                {'   '}\r\n                                {cart.shippingAddress.country},\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Payment Method</h2>\r\n\r\n                            <p>\r\n                                <strong>Method: </strong>\r\n                                {cart.paymentMethod}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                            {cart.cartItems.length === 0 ? <Message variant='info'>\r\n                                Your cart is empty!\r\n                            </Message> : (\r\n                                <ListGroup variant='flush'>\r\n                                    {cart.cartItems.map((item, index) => (\r\n                                        <ListGroup.Item key={index}>\r\n                                            <Row>\r\n                                                <Col md={2}>\r\n                                                    <Image src={item.image} alt={item.name} fluid rounded />\r\n                                                </Col>\r\n\r\n                                                <Col>\r\n                                                    <Link to={`/products/${item.product}`}>{item.name}</Link>\r\n                                                </Col>\r\n\r\n                                                <Col>\r\n                                                    {item.quantity} * ${item.price} = ${(item.quantity * item.price).toFixed(2)}\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </ListGroup.Item>\r\n                                    ))}\r\n                                </ListGroup>\r\n                            )}\r\n                        </ListGroup.Item>\r\n                        \r\n                    </ListGroup>\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n                    <Card>\r\n                        <ListGroup variant='flush'>\r\n                            <ListGroup.Item>\r\n                                <h2>Order Summary</h2>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Items: </Col>\r\n                                    <Col>${cart.itemsPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Includes Tax: </Col>\r\n                                    <Col>${cart.taxPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Shipping: </Col>\r\n                                    <Col>${cart.shippingPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            \r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Total: </Col>\r\n                                    <Col>${cart.totalPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                {error && <Message variant='danger'>{error}</Message>}\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Button \r\n                                    type='submit'\r\n                                    className='btn-block'\r\n                                    disabled={cart.cartItems === 0}\r\n                                    onClick={placeOrder}\r\n                                >\r\n                                    Place Order\r\n                                </Button>\r\n                            </ListGroup.Item>\r\n                        </ListGroup>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","D:\\GitHub\\django-react-shop\\frontend\\src\\reducers\\orderReducers.js",["161","162"],"D:\\GitHub\\django-react-shop\\frontend\\src\\constants\\orderConstants.js",[],"D:\\GitHub\\django-react-shop\\frontend\\src\\actions\\orderActions.js",["163"],"D:\\GitHub\\django-react-shop\\frontend\\src\\screens\\OrderScreen.js",["164","165"],{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":3,"column":34,"nodeType":"172","messageId":"173","endLine":3,"endColumn":37},{"ruleId":"170","severity":1,"message":"174","line":1,"column":16,"nodeType":"172","messageId":"173","endLine":1,"endColumn":24},{"ruleId":"175","severity":1,"message":"176","line":107,"column":78,"nodeType":"177","messageId":"178","endLine":107,"endColumn":80},{"ruleId":"170","severity":1,"message":"179","line":21,"column":5,"nodeType":"172","messageId":"173","endLine":21,"endColumn":30},{"ruleId":"175","severity":1,"message":"180","line":35,"column":21,"nodeType":"177","messageId":"178","endLine":35,"endColumn":23},{"ruleId":"170","severity":1,"message":"181","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":14},{"ruleId":"175","severity":1,"message":"180","line":49,"column":21,"nodeType":"177","messageId":"178","endLine":49,"endColumn":23},{"ruleId":"170","severity":1,"message":"182","line":2,"column":20,"nodeType":"172","messageId":"173","endLine":2,"endColumn":29},{"ruleId":"170","severity":1,"message":"182","line":2,"column":20,"nodeType":"172","messageId":"173","endLine":2,"endColumn":29},{"ruleId":"170","severity":1,"message":"174","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":18},{"ruleId":"183","severity":1,"message":"184","line":34,"column":8,"nodeType":"185","endLine":34,"endColumn":26,"suggestions":"186"},{"ruleId":"170","severity":1,"message":"187","line":4,"column":5,"nodeType":"172","messageId":"173","endLine":4,"endColumn":22},{"ruleId":"188","severity":1,"message":"189","line":32,"column":9,"nodeType":"190","messageId":"178","endLine":36,"endColumn":14},{"ruleId":"170","severity":1,"message":"191","line":14,"column":5,"nodeType":"172","messageId":"173","endLine":14,"endColumn":20},{"ruleId":"170","severity":1,"message":"174","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":18},{"ruleId":"170","severity":1,"message":"192","line":3,"column":10,"nodeType":"172","messageId":"173","endLine":3,"endColumn":16},"no-native-reassign",["193"],"no-negated-in-lhs",["194"],"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'USER_UPDATE_PROFILE_RESET' is defined but never used.","Expected '!==' and instead saw '!='.","'Link' is defined but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'order.id'. Either include them or remove the dependency array.","ArrayExpression",["195"],"'ORDER_CREATE_FAIL' is defined but never used.","no-duplicate-case","Duplicate case label.","SwitchCase","'ORDER_PAY_RESET' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"196","fix":"197"},"Update the dependencies array to be: [success, history, order.id, dispatch]",{"range":"198","text":"199"},[1289,1307],"[success, history, order.id, dispatch]"]